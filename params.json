{"name":"PennyPincher","tagline":"A fast gesture recognizer based on the PennyPincher algorithm, written in Swift.","body":"[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\r\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](http://opensource.org/licenses/MIT)\r\n[![Platform](https://img.shields.io/badge/platform-iOS-lightgrey.svg?style=flat)](https://github.com/fe9lix/PennyPincher)\r\n[![Swift](https://img.shields.io/badge/swift-2.0-orange.svg)](https://developer.apple.com/swift/blog/?id=29)\r\n\r\n# PennyPincher\r\n\r\nPennyPincher is a fast template-based gesture recognizer, developed by Eugene Taranta and Joseph LaViola (full paper reference below). The algorithm is well-suited for mobile applications since it is both fast and accurate and, as shown in the evaluation by the authors, outperforms other recognizers. This project provides a Swift implementation of PennyPincher and shows its usage in a simple example project. Also, the framework contains a UIGestureRecognizer subclass that integrates well into the existing gesture recognition framework of iOS.\r\n\r\nHere's the full reference for the paper:\r\n\r\n> Eugene M. Taranta, II and Joseph J. LaViola, Jr.. 2015. Penny pincher: a blazing fast, highly accurate $-family recognizer. In Proceedings of the 41st Graphics Interface Conference (GI '15). Canadian Information Processing Society, Toronto, Ont., Canada, Canada, 195-202.\r\n\r\n## Demo\r\n\r\n![PennyPincher](https://github.com/fe9lix/PennyPincher/raw/gh-pages/images/pennypincher.gif?raw=true)\r\n\r\n## Requirements\r\n\r\n*>=* iOS 8, Xcode 7, Swift 2.0\r\n\r\n## Installation\r\nRecommended installation options are via Carthage or manual installation.\r\n\r\n### Carthage:\r\nPennyPincher supports installation via [Carthage](https://github.com/Carthage/Carthage):\r\n\r\n- Add the following line to your Cartfile: `github \"fe9lix/PennyPincher\" >= 1.0`\r\n- Run `carthage update`\r\n\r\n### Manual:\r\n- Drag the folder `PennyPincherExample/Carthage/Build/iOS/PennyPincher.framework` into your Xcode project and select \"Copy items if needed\".\r\n- Make sure that the framework is added under `Embedded Binaries` in the general section of your project's target settings.\r\n\r\n## Usage\r\n\r\nPlease see the `ViewController` of the example project on how to use PennyPincher. Although you can use the `PennyPincher` class directly, the easiest way is to instantiate its gesture recognizer class, configure it, and add it to a view:\r\n\r\n```swift\r\nlet pennyPincherGestureRecognizer = PennyPincherGestureRecognizer()\r\npennyPincherGestureRecognizer.enableMultipleStrokes = true\r\npennyPincherGestureRecognizer.allowedTimeBetweenMultipleStrokes = 0.2\r\npennyPincherGestureRecognizer.cancelsTouchesInView = false\r\npennyPincherGestureRecognizer.addTarget(self, action: \"didRecognize:\")\r\n\r\nview.addGestureRecognizer(pennyPincherGestureRecognizer)\r\n```\r\n\r\nIn the code above, the following properties are set:\r\n\r\n- `enableMultipleStrokes`: Allows gestures to be composed of multiple separate strokes, as long as the pause between strokes does not exceed `allowedTimeBetweenMultipleStrokes`. When the property is set to `false`, the gesture recognizer transitions to the cancelled state as soon as the user lifts the finger.\r\n- `allowedTimeBetweenMultipleStrokes`: See above.\r\n- `cancelsTouchesInView`: Regular iOS gesture recongizer property. Might be set to `false` when you want to ensure that touches are still delivered to the attached view. \r\n\r\nThe target-action pair is executed for state changes triggered by the recognizer. You can use the `state` property to react accordingly in the UI. The `result` property returns a tuple consisting of the recognized `PennyPincherTemplate` and CGFloat value indicating the similarity. For example:\r\n\r\n```swift\r\nguard let (template, similarity) = pennyPincherGestureRecognizer.result else {\r\n    print(\"Could not recognize.\")\r\n    return\r\n}\r\n\r\nlet similarityString = String(format: \"%.2f\", similarity)\r\nprint(\"Template: \\(template.id), Similarity: \\(similarityString)\")\r\n```\r\n\r\nYou can add and remove templates by modifying the `templates` array property of the recognizer. The `PennyPincher` class provides a static method to create new templates of type `PennyPincherTemplate` (a struct). Required parameters are the `id` (a unique string) and `points` (an array of CGPoints).\r\n\r\nFor example:\r\n\r\n```swift\r\nlet template = PennyPincher.createTemplate(\"templateID\", points: points)\r\npennyPincherGestureRecognizer.templates.append(template)\r\n```\r\n\r\nTemplates could be serialized and saved to disk and then loaded again into memory when the application launches. PennyPincher works pretty well with only one template per geture (`id`) but, depending on your use case, you can increase its accuracy by adding more for each gesture.\r\n\r\n## Author\r\n\r\nfe9lix\r\n\r\n## License\r\n\r\nPennyPincher is available under the MIT license. See the LICENSE file for more info.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}